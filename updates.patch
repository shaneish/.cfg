diff --git a/deps/_cargo b/deps/_cargo
index c0d276b..cdf66d5 100644
--- a/deps/_cargo
+++ b/deps/_cargo
@@ -19,6 +19,7 @@ cargo install choose
 cargo install tealdeer
 cargo install onefetch --force
 cargo install starship
+cargo install tree-rs
 
 _alias eza ll
 _alias fselect fs
diff --git a/dots b/dots
new file mode 160000
index 0000000..93bbaca
--- /dev/null
+++ b/dots
@@ -0,0 +1 @@
+Subproject commit 93bbaca7a5b2d307a7873022a731329ac3745773
diff --git a/fish/config.fish b/fish/config.fish
index c8d91a2..aa41ac9 100644
--- a/fish/config.fish
+++ b/fish/config.fish
@@ -25,6 +25,7 @@ if status is-interactive
     alias ll="eza"
     alias cls="clear; fish"
     alias opn="fd '' . | fz -m | xargs $EDITOR"
+    alias vym="source $HOME/.config/nvim/venv/bin/activate.fish; nvim"
     abbr -a fs fselect
     if type -q "bhop"
         alias _hp_fz_fixed="bhop __bhop_list__ | fnk filter -f 'f -> \":\" not in f' | fz -m | fnk map -f 'f -> f.split()[-1]' | xargs"
@@ -65,5 +66,11 @@ if status is-interactive
 
     if test -e $PYTHON_VENV/bin/activate.fish
         source $PYTHON_VENV/bin/activate.fish
+    else
+        for f in (ls $PYTHON_VENV_DIR 2> /dev/null | sort --numeric --reverse)
+            if test -e $f/bin/activate.fish
+                source $f/bin/activate.fish
+            end
+        end
     end
 end
diff --git a/fish/fish_variables b/fish/fish_variables
index c0b1335..ab258fc 100644
--- a/fish/fish_variables
+++ b/fish/fish_variables
@@ -6,11 +6,11 @@ SETUVAR --export CONFIG_DIRECTORY:/Users/h62756/\x2econfig
 SETUVAR --export FISH_CONFIG_DIRECTORY:/Users/h62756/\x2econfig/fish
 SETUVAR --export MACHINE_IDENTIFIER:Darwin\x2dJJ4DNV2JYM\x2etld\x2d23\x2e4\x2e0
 SETUVAR --export NVIM_DIRECTORY:/Users/h62756/\x2econfig/nvim
-SETUVAR --export PYTHON_VENV:\x1d
+SETUVAR --export PYTHON_VENV:/Users/h62756/\x2elocal/venvs/3\x2e12
 SETUVAR --export PYTHON_VENV_DIR:/Users/h62756/\x2elocal/venvs
 SETUVAR --export SCRIPTS_DIRECTORY:/Users/h62756/\x2econfig/scripts
 SETUVAR SKIM_LEGACY_KEYBINDINGS:0
-SETUVAR __fish_initialized:3400
+SETUVAR __fish_initialized:3800
 SETUVAR fish_color_autosuggestion:6c6c6c
 SETUVAR fish_color_cancel:\x1d
 SETUVAR fish_color_command:\x1d
diff --git a/fish/functions/csq.fish b/fish/functions/csq.fish
new file mode 100644
index 0000000..0f9ee2e
--- /dev/null
+++ b/fish/functions/csq.fish
@@ -0,0 +1,3 @@
+function csq -d "run sql queries on csv data"
+    sqlite3 "" ".mode csv" ".import $argv[1] _" "$argv[2]"
+end
diff --git a/fish/functions/pynvim.fish b/fish/functions/pynvim.fish
deleted file mode 100644
index 5030e22..0000000
--- a/fish/functions/pynvim.fish
+++ /dev/null
@@ -1,4 +0,0 @@
-function pynvim --description "nvim but activate python venv first"
-    source $HOME/.config/nvim/venv/bin/activate.fish
-    nvim $argv
-end
diff --git a/fish/functions/select.fish b/fish/functions/select.fish
new file mode 100644
index 0000000..a94bc01
--- /dev/null
+++ b/fish/functions/select.fish
@@ -0,0 +1,27 @@
+function select -d "simplify running SQLish statements from the commandline over CSVs and other file formats"
+    # TODO: include logic to parse whether file is csv, psv, tsv, etc and update separator accordingly
+    set separator ','
+    set source_triggers from FROM From
+    set arg_len (count $argv)
+    for i in (seq $arg_len)
+        if contains $argv[$i] $source_triggers
+            set -f next_i (sqlite3 "" "select $i + 1")
+            if test $next_i -le $arg_len
+                set -f source $argv[$next_i]
+                break
+            end
+        end
+    end
+    set -f query "select"
+    for arg in $argv
+        if test "$arg" = "$source"
+            set -a query "__CSV__"
+        else
+            set -a query "$arg"
+        end
+    end
+    if test "$source" = "_"
+        set -f source (fd '*.csv' --glob | fz)
+    end
+    sqlite3 "" ".headers on" ".separator $separator" ".mode csv" ".import $source __CSV__" "$query"
+end
diff --git a/notes/check.txt b/notes/check.txt
new file mode 100644
index 0000000..e2f471d
--- /dev/null
+++ b/notes/check.txt
@@ -0,0 +1,12 @@
+- private data science
+    * set limits on aggregation to ensure data is de-identified
+    * how do you share information with untrusted parties?
+    * federated data markets
+    * run broad/aggregated compute on data without exposing underlying identifiable information
+    * look into: preprocessing data to anonymize (similar to census data) vs enabling "run your code in our environment"
+- private computing
+    * anonymous computation via cloud platform
+- openmined
+    * submit query through openmind and they transform it to ensure privacy
+    * https://github.com/OpenMined
+    * https://openmined.org/
diff --git a/notes/varser.md b/notes/varser.md
new file mode 100644
index 0000000..e020fb1
--- /dev/null
+++ b/notes/varser.md
@@ -0,0 +1,31 @@
+# varser (variable parser)
+
+## why
+to be able to easily parse large chunks of data with an indeterminate structure into a structured data type (json, md, whatevs)
+
+## implementation
+### chunks
+a chunk is a fundamental unit of aggregation.  the beginning of each chunk is identified by a pattern and then all text between the beginning of one pattern match to the beginning of the next valid pattern match becomes the entirety of that chunk:
+- a chunk has the following required arguments:
+  * chunk identifier pattern: a pattern that can be used to identify the start of a given chunk.  if the pattern is matched, the matching text and all subsequent until the next matching line will constitute the chunk.  think of this splitting the entire text of the current chunk on this pattern.
+  * optional arguments:
+    + tag patterns: a collection of `{name: pattern}` pairs that can be applied to the chunk to extract structured information.
+    + chunk body pattern: a pattern than can be used to extract the chunk for further chunking.  if supplied, only text inside chunk body is chunked.  if none is supplied, the entirety of the current chunk is split.
+    + preprocessing: text transformation rules applied to chunk body prior to chunking body into new chunks.
+
+A chunking pattern will then be stated as a sequence of defined chunks, wherein the body of each chunk will then be chunked itself:
+```console
+CHUNK_PATTERN_1 -> CHUNK_PATTERN_2 -> ... -> CHUNK_PATTERN_N
+```
+This will extract the text into a JSON structure like so:
+```json
+[
+  {
+    "_metadata": {"identifier_match": "...", "chunk": "...", "chunk_body": "..."},
+    "chunks": [ ... ],
+    "tag_1": "...",
+    "tag_2": "...",
+  },
+  ...
+]
+```
diff --git a/nvim/.vimrc b/nvim/.vimrc
index 81e3937..b6a8e41 100644
--- a/nvim/.vimrc
+++ b/nvim/.vimrc
@@ -1,7 +1,10 @@
 filetype plugin indent on
 let mapleader=" "
 let maplocalleader="\\"
-let &t_EI = "\e[2 q"
+if ! has('nvim')
+    let &t_EI = "\e[2 q"
+    let &t_SI = "\e[5 q"
+endif
 colorscheme quiet
 syntax on
 function! TrimWhitespace()
@@ -10,8 +13,6 @@ function! TrimWhitespace()
     call winrestview(l:save)
 endfunction
 
-let &t_SI = "\e[5 q"
-
 function! BuffJump()
     ls
     let bufnr = input("Enter buffer number: ")
@@ -76,24 +77,16 @@ function! Fishified(path="")
     return trim(path_info)
 endfunction
 
-function! Existor(var="", alt="")
-    let out = a:alt
-    if exists(a:var)
-        execute 'let out = ' . a:var
-    endif
-    return out
-endfunction
-
-function! GitInfo(type="repo", var="", dir="", label="", prefix="", suffix="", separator="")
+function! GitInfo(type="repo", dir="", label="", prefix="", suffix="", separator="")
     let dir = a:dir
     let git_info = ""
     let label = a:label
     if a:label == ""
         let label = a:type
     endif
-    let git_info_suffix = Existor('g:git_info_suffix', a:suffix)
-    let git_info_prefix = Existor('g:git_info_prefix', a:prefix)
-    let git_info_separator = Existor('g:git_info_separator', a:separator)
+    let git_info_suffix = a:suffix
+    let git_info_prefix = a:prefix
+    let git_info_separator = a:separator
     if a:dir == ""
         let dir = expand('%:p:h')
     endif
@@ -104,9 +97,6 @@ function! GitInfo(type="repo", var="", dir="", label="", prefix="", suffix="", s
     if !(info =~ "fatal: *") && !(info =~ "basename: *")
         let git_info = git_info . git_info_prefix . label . git_info_separator . info . git_info_suffix
     endif
-    if a:var != ""
-        execute 'let ' . a:var . ' = git_info'
-    endif
     return trim(git_info)
 endfunction
 
@@ -139,6 +129,36 @@ function! ToggleConcealLevel()
     endif
 endfunction
 
+function! WindowProportion(prop=0.25)
+    let window_size = line('w$') - line('w0')
+    let jump_size = window_size * a:prop
+    return float2nr(jump_size)
+endfunction
+
+function! NextBlankLine(prop=0.5)
+    let next_blank_line = search('^$\n\s*\S', 'n') - line('.')
+    let next_prop_jump = WindowProportion(a:prop)
+    let jump_dist = next_prop_jump
+    if 0 < next_blank_line
+        if next_blank_line < jump_dist
+            let jump_dist = next_blank_line
+        endif
+    endif
+    return jump_dist
+endfunction
+
+function! PrevBlankLine(prop=0.5)
+    let prev_blank_line = line('.') - search('^$\n\s*\S', 'nb')
+    let prev_prop_jump = WindowProportion(a:prop)
+    let jump_dist = prev_prop_jump
+    if 0 < prev_blank_line
+        if prev_blank_line < jump_dist
+            let jump_dist = prev_blank_line
+        endif
+    endif
+    return jump_dist
+endfunction
+
 " #settings ish"
 set termguicolors
 set linespace=10
@@ -178,8 +198,8 @@ set laststatus=2
 let g:sl_s = " | "
 let g:sl_p = "."
 let g:sl_sep = ": "
-let b:git_info_branch = GitInfo("branch", "b:git_info_branch", "", "", g:sl_p, g:sl_s, g:sl_sep)
-let b:git_info_repo = GitInfo("repo", "b:git_info_repo", "", "", g:sl_p, g:sl_s, g:sl_sep)
+let b:git_info_branch = GitInfo("branch", "", "", g:sl_p, g:sl_s, g:sl_sep)
+let b:git_info_repo = GitInfo("repo", "", "", g:sl_p, g:sl_s, g:sl_sep)
 let b:path_info = Fishified()
 set statusline=\ %{g:sl_p}buffnr%{g:sl_sep}%n%{g:sl_s}%{g:sl_p}lines%{g:sl_sep}%L%{g:sl_sep}%P%{g:sl_s}%{b:git_info_repo}%{b:git_info_branch}%{g:sl_p}path%{g:sl_sep}%{b:path_info}
 
@@ -191,14 +211,8 @@ augroup END
 
 augroup weird_two_space_formats
     autocmd!
-    autocmd FileType toml setlocal shiftwidth=2 tabstop=2 softtabstop=2
-    autocmd FileType lua setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
-    autocmd FileType go setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
-    autocmd FileType haskell setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab
-    autocmd FileType markdown setlocal shiftwidth=2 tabstop=2 softtabstop=2 conceallevel=0
-    autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
-    autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2
-    autocmd FileType xml setlocal shiftwidth=2 tabstop=2 softtabstop=2
+    autocmd FileType toml,markdown,html,css,xml,json setlocal shiftwidth=2 tabstop=2 softtabstop=2 conceallevel=0
+    autocmd FileType lua,haskell setlocal shiftwidth=2 tabstop=2 softtabstop=2
 augroup END
 
 augroup terminal_madness
@@ -213,18 +227,12 @@ augroup errytime
     autocmd VimEnter,BufEnter,WinEnter *.md setlocal conceallevel=0
     autocmd VimEnter,BufEnter,WinEnter *.json setlocal conceallevel=0
     autocmd VimEnter,BufEnter,WinEnter *.yaml setlocal conceallevel=0
-    autocmd VimEnter,BufEnter,WinEnter * silent call GitInfo("branch", "b:git_info_branch", "", "", g:sl_p, g:sl_s, g:sl_sep)
-    autocmd VimEnter,BufEnter,WinEnter * silent call GitInfo("repo", "b:git_info_repo", "", "", g:sl_p, g:sl_s, g:sl_sep)
-    autocmd VimEnter,BufEnter,WinEnter * silent call Fishified()
-    autocmd VimEnter,BufEnter,WinEnter * silent nmap <C-,> :cprev<CR>
-    autocmd VimEnter,BufEnter,WinEnter * silent nmap <C-.> :cnext<CR>
+    autocmd VimEnter,BufEnter,WinEnter * silent let b:git_info_branch = GitInfo("branch", "", "", g:sl_p, g:sl_s, g:sl_sep)
+    autocmd VimEnter,BufEnter,WinEnter * silent let b:git_info_repo = GitInfo("repo", "", "", g:sl_p, g:sl_s, g:sl_sep)
+    autocmd VimEnter,BufEnter,WinEnter * silent let b:path_info = Fishified()
+    autocmd VimEnter,BufEnter,WinEnter * silent nmap <C-,> :cprev<CR> " :lprev
+    autocmd VimEnter,BufEnter,WinEnter * silent nmap <C-.> :cnext<CR> " :lnext
     autocmd VimEnter,BufEnter,WinEnter * setlocal statusline=\ %{g:sl_p}buffnr%{g:sl_sep}%n%{g:sl_s}%{g:sl_p}lines%{g:sl_sep}%L%{g:sl_sep}%P%{g:sl_s}%{b:git_info_repo}%{b:git_info_branch}%{g:sl_p}path%{g:sl_sep}%{b:path_info}
-    " autocmd VimEnter,BufEnter,WinEnter * setlocal statusline=\ .buff->%n\ .lines->%L->%P)\ %{b:git_info_branch}%{b:git_info_repo}\.path->%{b:path_info}
-augroup END
-
-augroup compatibility
-    autocmd!
-    autocmd VimEnter * silent !echo -ne "\\e[2 q"
 augroup END
 
 augroup colorscheme_madness
@@ -235,10 +243,11 @@ augroup colorscheme_madness
 augroup END
 
 if ! has('nvim')
-    augroup buff_fix
+    augroup compatibility
         autocmd!
         autocmd VimEnter,BufEnter,WinEnter * nmap <S-Tab> :bprev<CR>
         autocmd VimEnter,BufEnter,WinEnter * nmap <Tab> :bnext<CR>
+        autocmd VimEnter,BufEnter,WinEnter * silent !echo -ne "\\e[2 q"
     augroup END
 endif
 
@@ -253,23 +262,22 @@ tmap <expr> <C-e><C-e> '<C-\><C-n>' . CloseIt() . '<CR>'
 
 " Core
 inoremap <S-CR> <Esc>
-nmap <silent> <leader><leader>h :noh<CR>
 nmap <expr> <C-e><C-e> CloseIt() . '<CR>'
 nmap <C-e><C-w> <cmd>w!<CR>
 nmap <C-q><C-q> <cmd>q!<CR>
 nmap <leader><leader>w <cmd>w!<CR>
 nmap <leader><leader>q <cmd>q!<CR>
 nmap <C-w><C-q> :w!<CR>:q!<CR>
-nmap <C-.> :cnext<CR>
-nmap <C-,> :cprev<CR>
+nmap <C-.> :cnext<CR> " :lnext
+nmap <C-,> :cprev<CR> " :lprev
 nmap <Tab> :bnext<CR>
 nmap <S-Tab> :bprev<CR>
 inoremap <C-v> <C-r>+
 nmap <silent> <leader><leader>t :call TrimWhitespace()<CR>
 nmap <silent> <leader><leader>h :noh<CR>
 nmap \ :call ToggleNetrw()<CR>
-nmap <C-f><C-f> :call ToggleConcealLevel()<CR>
-imap <C-f><C-f> :call ToggleConcealLevel()<CR>
+nmap <C-f><C-t> :call ToggleConcealLevel()<CR>
+imap <C-f><C-t> :call ToggleConcealLevel()<CR>
 
 " grepy grep
 if executable('rg')
@@ -284,7 +292,7 @@ nmap <silent> <expr> <C-g><C-j> ":grep <cword> *." . expand('%:e') . "<CR>:copen
 nnoremap <expr> <leader>- ResizePane("-5") . '<CR>'
 nnoremap <expr> <leader>= ResizePane("+5") . '<CR>'
 nmap cow <C-w><C-w>:clo<CR>
-nnoremap <C-b> :call BuffJump()<CR>
+nnoremap <leader>bj :call BuffJump()<CR>
 
 " line stuff
 nnoremap <C-o><C-o> O<Esc>jo<Esc>k
@@ -296,14 +304,12 @@ noremap j gj
 noremap k gk
 noremap J )zz
 noremap K (zz
-nnoremap <C-j> }jzz
-nnoremap <C-k> {kzz
+noremap <expr> <C-j> NextBlankLine() . 'jzz'
+noremap <expr> <C-k> PrevBlankLine() . 'kzz'
 noremap <expr> D WindowProportion() . 'jzz'
 noremap <expr> U WindowProportion() . 'kzz'
 noremap <leader>l g$
 noremap <leader>h g^
-xnoremap <C-j> j}kzz
-xnoremap <C-k> k{jzz
 nnoremap <C-i> J
 nnoremap <C-h> ge
 nnoremap <C-l> w
@@ -325,7 +331,6 @@ noremap x "_x
 noremap C "1C
 noremap <leader>p "1p
 noremap <leader>P "1P
-noremap <C-p> :call TrimAndPaste()<CR>
 noremap <leader><C-p> :call TrimAndPaste()<CR>
 
 " Insert
@@ -357,3 +362,12 @@ for k in ["\'", '"', "`", ")", "]", "}", ">", "_", "<Space>", "*", '.']
     execute 'xnoremap Sv'.k.' <Esc>`<i'.Pairs(k).'<Esc>`>la'.k.'<Esc>v`<'
     execute 'xnoremap Sr'.k.' <Esc>`<r'.Pairs(k).'`>r'.k.'v`<'
 endfor
+for k in ["\'", '"', "`", ")", "]", "}", ">", "_", "<Space>", "*", '.']
+    for v in ["\'", '"', "`", ")", "]", "}", ">", "_", "<Space>", "*", '.']
+        execute "nmap Ss".k.v.' F'.k.'vf'.k.'Sr'.v.'<Esc>'
+    endfor
+endfor
+
+for k in ["\'", '"', "`", ")", "]", "}", ">", "_", "<Space>", "*", '.']
+    execute "nmap Sw".k.' viwS'.k.'l'
+endfor
diff --git a/nvim/init.vim b/nvim/init.vim
index 9ff4dc3..82a8db2 100644
--- a/nvim/init.vim
+++ b/nvim/init.vim
@@ -62,7 +62,6 @@ Plug 'kyazdani42/nvim-web-devicons'
 Plug 'oatish/smartcolumn.nvim'
 Plug 'norcalli/nvim-colorizer.lua'
 Plug 'scalameta/nvim-metals'
-Plug 'akinsho/toggleterm.nvim', {'tag' : '*'}
 Plug 'czheo/mojo.vim'
 Plug 'stevearc/aerial.nvim' " navigate by code structure
 Plug 'simrat39/symbols-outline.nvim' " view code structure
@@ -76,6 +75,7 @@ Plug 'jpalardy/vim-slime'
 Plug 'Klafyvel/vim-slime-cells'
 Plug 'drybalka/tree-climber.nvim'
 Plug 'milanglacier/yarepl.nvim' " https://github.com/milanglacier/yarepl.nvim
+Plug 'meatballs/notebook.nvim'
 call plug#end()
 
 " %%
@@ -241,6 +241,14 @@ function! WeztermSlimePane()
     let g:slime_cell_delimiter = CodeBlock()
 endfunction
 
+function! GitPermalink()
+    let [_, l1, _, _] = getpos("'<")
+    let [_, l2, _, _] = getpos("'>")
+    let url = trim(system("gurl " . expand('%:p') . " -l " . l1 . ":" . l2))
+    echo url
+    let @+ = url
+endfunction
+
 " %%
 " config stuff
 let g:python_bin = substitute($MYVIMRC, "/init.vim", "", "") . '/venv/bin/'
@@ -319,7 +327,7 @@ imap <C-s><C-h> <Plug>(copilot-dismiss)
 imap <C-s><C-s> <Plug>(copilot-suggest)
 
 " Terminal
-nmap <leader><leader>t :call OpenTerm()<CR>
+nmap <leader>t :call OpenTerm()<CR>
 
 " Buffers
 nmap <C-b><C-f> <cmd>BufferPick<CR>
@@ -341,7 +349,7 @@ nnoremap <C-t>[ <cmd>lua require("harpoon.ui").nav_prev()<CR>
 nnoremap <C-t>1 <cmd>lua require("harpoon.ui").nav_file(1)<CR>
 nnoremap <C-t>2 <cmd>lua require("harpoon.ui").nav_file(2)<CR>
 nnoremap <C-t>3 <cmd>lua require("harpoon.ui").nav_file(3)<CR>
-nnoremap <C-m>h <cmd>Telescope harpoon marks<CR>
+nnoremap <C-t>h <cmd>Telescope harpoon marks<CR>
 nnoremap <C-g><C-m> <cmd>MergetoolToggle<CR>
 
 " slime stuff
@@ -359,18 +367,20 @@ xmap <C-c><C-c> <Plug>SlimeRegionSend
 " tree climber
 augroup TreeClimber
     autocmd!
-    autocmd VimEnter,BufEnter,WinEnter * noremap <silent> H :lua require('tree-climber').goto_parent({highlight = true, timeout = 250, skip_comments = true})<CR>zz
-    autocmd VimEnter,BufEnter,WinEnter * noremap <silent> L :lua require('tree-climber').goto_child({highlight = true, timeout = 250, skip_comments = true})<CR>zz
-    autocmd VimEnter,BufEnter,WinEnter * noremap <silent> J :lua require('tree-climber').goto_next({highlight = true, timeout = 250, skip_comments = true})<CR>zz
-    autocmd VimEnter,BufEnter,WinEnter * noremap <silent> K :lua require('tree-climber').goto_prev({highlight = true, timeout = 250, skip_comments = true})<CR>zz
-    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> <leader>k :lua require('tree-climber').swap_prev()<CR>zz
-    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> <leader>j :lua require('tree-climber').swap_next()<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> H :lua require('tree-climber').goto_parent({highlight = true, timeout = 250, skip_comments = true})<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> L :lua require('tree-climber').goto_child({highlight = true, timeout = 250, skip_comments = true})<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> J :lua require('tree-climber').goto_next({highlight = true, timeout = 250, skip_comments = true})<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> K :lua require('tree-climber').goto_prev({highlight = true, timeout = 250, skip_comments = true})<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> <C-s><C-k> :lua require('tree-climber').swap_prev()<CR>zz
+    autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> <C-s><C-j> :lua require('tree-climber').swap_next()<CR>zz
     autocmd VimEnter,BufEnter,WinEnter * nnoremap <silent> <leader>v v:lua require('tree-climber').select_node()<CR>
+    autocmd VimEnter,BufEnter,WinEnter * xnoremap <silent> H :lua require('tree-climber').goto_parent({highlight = true, timeout = 250, skip_comments = true})<CR>zzv:lua require('tree-climber').select_node()<CR>
+    autocmd VimEnter,BufEnter,WinEnter * xnoremap <silent> L :lua require('tree-climber').goto_child({highlight = true, timeout = 250, skip_comments = true})<CR>zzv:lua require('tree-climber').select_node()<CR>
+    autocmd VimEnter,BufEnter,WinEnter * xnoremap <silent> J :lua require('tree-climber').goto_next({highlight = true, timeout = 250, skip_comments = true})<CR>zzv:lua require('tree-climber').select_node()<CR>
+    autocmd VimEnter,BufEnter,WinEnter * xnoremap <silent> K :lua require('tree-climber').goto_prev({highlight = true, timeout = 250, skip_comments = true})<CR>zzv:lua require('tree-climber').select_node()<CR>
 augroup END
 
 nnoremap <C-s> <cmd>Pounce<CR>
-nnoremap <C-m>ls :MarksListBuf<CR>
-nnoremap <C-m>la :MarksListGlobal<CR>
 nnoremap <C-t><C-t> :call CycleCodeBlockSuffix()<CR>:echo "Cell delimiter: " . g:code_block_current<CR>
 nnoremap <C-t><C-n> :call UpdateCodeBlockSuffix()<CR>
 nnoremap <expr> <C-t><C-b> "A" . CodeBlock() . '<Esc>'
@@ -380,6 +390,6 @@ nnoremap <expr> <C-t><C-j><C-j> "o<Esc>0C" . CodeBlock() . '<CR>'
 nnoremap <expr> <C-t><C-k><C-k> "O<Esc>0C" . CodeBlock() . '<Esc>O'
 
 nmap \ :NvimTreeFindFileToggle<CR>:set number<CR>:set nowrap<CR>
-nnoremap <C-f><C-l> :lua vim.lsp.buf.formatting()<CR>
-inoremap <C-f><C-l> :lua vim.lsp.buf.formatting()<CR>
 nnoremap <leader><leader>r :source $MYVIMRC<CR>
+xnoremap gp <Esc>:call GitPermalink()<CR>
+
diff --git a/nvim/lua/diagnostics.lua b/nvim/lua/diagnostics.lua
deleted file mode 100644
index 783524d..0000000
--- a/nvim/lua/diagnostics.lua
+++ /dev/null
@@ -1,27 +0,0 @@
-local signs = { Error = "✘", Warn = "", Hint = "•", Info = "" }
-local diagnostics_active = true
-
-for type, icon in pairs(signs) do
-    local hl = "DiagnosticSign" .. type
-    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
-end
-
-vim.diagnostic.config({
-    virtual_text = {
-        prefix = '●', -- Could be '●', '▎', 'x'
-    }
-})
-
-local function toggle_diagnostics()
-  diagnostics_active = not diagnostics_active
-  if diagnostics_active then
-    vim.diagnostic.show()
-  else
-    vim.diagnostic.hide()
-  end
-end
-
-
-vim.keymap.set('n', '<leader><leader>D', function()
-    toggle_diagnostics()
-end)
diff --git a/nvim/lua/lazy-config.lua b/nvim/lua/lazy-config.lua
deleted file mode 100644
index a5b8fbf..0000000
--- a/nvim/lua/lazy-config.lua
+++ /dev/null
@@ -1,22 +0,0 @@
--- Bootstrap lazy.nvim
-local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
-if not (vim.uv or vim.loop).fs_stat(lazypath) then
-  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
-  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
-  if vim.v.shell_error ~= 0 then
-    vim.api.nvim_echo({
-      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
-      { out, "WarningMsg" },
-      { "\nPress any key to exit..." },
-    }, true, {})
-    vim.fn.getchar()
-    os.exit(1)
-  end
-end
-vim.opt.rtp:prepend(lazypath)
-
--- Make sure to setup `mapleader` and `maplocalleader` before
--- loading lazy.nvim so that mappings are correct.
--- This is also a good place to setup other settings (vim.opt)
-vim.g.mapleader = " "
-vim.g.maplocalleader = "\\"
diff --git a/nvim/lua/load-all.lua b/nvim/lua/load-all.lua
index 7f3f27b..c048ee3 100644
--- a/nvim/lua/load-all.lua
+++ b/nvim/lua/load-all.lua
@@ -1,21 +1,84 @@
-servers = { "lua_ls", "vimls", "rust_analyzer", "zls", "pyright", "gopls", "ruff" }
--- mason_servers = { "terraformls", "pyright", "lua_ls", "vimls", "rust_analyzer", "zls", "tflint", "ruff_lsp" }
-require('treesitter-config')
-require('nvim-cmp-config')
-require('lspconfig-config')
-require('telescope-config')
-require('nvim-tree-config')
-require('diagnostics')
+-- %% simple deps
+require('telescope')
 require('telescope').load_extension('harpoon')
-require('nvim-navbuddy')
-require("toggleterm").setup()
-require('leap').add_default_mappings()
 require('csvview').setup()
 require('rainbow_csv').setup()
+require('colorizer').setup()
+local navbuddy = require("nvim-navbuddy")
+
+-- %% modularly defined deps
+require('nvim-cmp-config')
+require('zen-config')
+
+-- %% leap
+require('leap').add_default_mappings()
+vim.api.nvim_create_autocmd( { 'BufEnter', 'VimEnter' }, {
+    pattern = "*",
+    callback = function(event)
+      vim.keymap.set({'n', 'x', 'o'}, 's',  '<Plug>(leap-forward)')
+    end,
+})
+vim.api.nvim_create_autocmd( { 'BufEnter', 'VimEnter' }, {
+    pattern = "*",
+    callback = function(event)
+      vim.keymap.set({'n', 'x', 'o'}, 'S',  '<Plug>(leap-backward)')
+    end,
+})
+require('leap.user').set_repeat_keys('<enter>', '<backspace>')
+
+-- %% treesitter
+require('nvim-treesitter.configs').setup {
+    ensure_installed = {
+        'python',
+        'comment',
+        'lua',
+        'rust',
+        'go',
+        'cpp',
+        'lua',
+        'typescript',
+        'javascript',
+        'vim',
+        'vimdoc',
+        'query',
+        'markdown',
+        'markdown_inline',
+        'nim',
+        'terraform',
+        'zig',
+        'bash',
+        'fish'
+    },
+    sync_install = false,
+    auto_install = true,
+    highlight = {
+        enable = true,
+        additional_vim_regex_highlighting = false,
+    },
+}
+
+-- %% nvim-tree
+require'nvim-tree'.setup {
+    git = {
+        enable = true,
+        ignore = false,
+        timeout = 400,
+    },
+}
+
+-- %%
+require('notebook').setup {
+    insert_blank_line = true,
+    show_index = true,
+    show_cell_type = true,
+    virtual_text_style = { fg = "#ffd700", italic = true },
+}
 
+-- %% symbols outline
 require("symbols-outline").setup()
 vim.keymap.set("n", "<leader>s", "<cmd>SymbolsOutline<CR>")
 
+-- %% glow
 require('glow').setup({
     width = 240,
     height = 240,
@@ -25,20 +88,7 @@ require('glow').setup({
     install_path = '/usr/bin/glow'
 })
 
-require('mason').setup({
-    ui = {
-        icons = {
-            package_installed = "✓",
-            package_pending = "➜",
-            package_uninstalled = "✗"
-        }
-    }
-})
-
-require('mason-lspconfig').setup {
-    ensure_installed = servers
-}
-
+-- %% marks
 require('marks').setup({
   default_mappings = true,
   builtin_marks = { ".", "<", ">", "^" },
@@ -52,69 +102,187 @@ require('marks').setup({
       virt_text = "bookmarks",
       annotate = false,
   },
-  mappings = {}
+  mappings = {
+    set_next = "<C-f><leader>",
+    toggle = "<C-f><C-m>",
+    next = "<C-f><C-j>",
+    prev = "<C-f><C-k>",
+    preview = "<C-f>p",
+    annotate = "<C-f>o",
+    next_bookmark = "<C-f><C-l>",
+    prev_bookmark = "<C-f><C-h>",
+    delete_line = "<C-f>d",
+    delete_buf = "<C-f>c",
+    delete_bookmark = "<C-f>x",
+    set_bookmark0 = "<C-f>0",
+    set_bookmark1 = "<C-f>1",
+    set_bookmark2 = "<C-f>2",
+    set_bookmark3 = "<C-f>3",
+    set_bookmark4 = "<C-f>4",
+    set_bookmark5 = "<C-f>5",
+    set_bookmark6 = "<C-f>6",
+    set_bookmark7 = "<C-f>7",
+    set_bookmark8 = "<C-f>8",
+    set_bookmark9 = "<C-f>9",
+  }
 })
+vim.keymap.set("n", "<C-f>lb", "<cmd>MarksListBuf<CR>")
+vim.keymap.set("n", "<C-f>lg", "<cmd>MarksListGlobal<CR>")
+vim.keymap.set("n", "<C-f>ls", "<cmd>MarksListAll<CR>")
+vim.keymap.set("n", "<C-f>ll", "<cmd>BookmarksListAll<CR>")
 
+-- %% smartcolumn
 require("smartcolumn").setup({
-    colorcolumn = 140,
+    colorcolumn = 110,
     limit_to_window = true,
 })
-require('colorizer').setup()
+
+-- %% diagnostics
+local signs = { Error = "✘", Warn = "", Hint = "•", Info = "" }
+local diagnostics_active = true
+
+for type, icon in pairs(signs) do
+    local hl = "DiagnosticSign" .. type
+    vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
+end
+
+vim.diagnostic.config({
+    virtual_text = {
+        prefix = '●', -- Could be '●', '▎', 'x'
+    }
+})
+
+local function toggle_diagnostics()
+  diagnostics_active = not diagnostics_active
+  if diagnostics_active then
+    vim.diagnostic.show()
+  else
+    vim.diagnostic.hide()
+  end
+end
+
+vim.keymap.set('n', '<C-e><C-h>', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
+vim.keymap.set('n', '<C-e><C-k>', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
+vim.keymap.set('n', '<C-e><C-j>', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
+vim.keymap.set('n', '<C-e><C-l>', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
+vim.keymap.set('n', '<C-e><C-t>', function()
+    toggle_diagnostics()
+end)
+
+-- %% lsp
+local servers = { "lua_ls", "vimls", "rust_analyzer", "zls", "pyright", "gopls", "ruff", "terraformls", "tflint", "sqqls" }
+local opts = { noremap=true, silent=true }
+local capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
+local lspconfig = require('lspconfig')
+local on_attach = function(client, bufnr)
+    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
+    vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
+    -- See `:help vim.lsp.*` for documentation on any of the below functions
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>D', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>d', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>i', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>s', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>t', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>r', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>c', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-l>r', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
+    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader><leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
+    navbuddy.attach(client, bufnr)
+end
 
 vim.lsp.handlers["textDocument/publishDiagnostics"] =
     vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
         underline = false
-        })
-local opts = { noremap=true, silent=true }
-vim.keymap.set('n', '<C-e>h', vim.diagnostic.open_float, opts)
-vim.keymap.set('n', '<C-e>k', vim.diagnostic.goto_prev, opts)
-vim.keymap.set('n', '<C-e>j', vim.diagnostic.goto_next, opts)
-vim.keymap.set('n', '<C-e>l', vim.diagnostic.setloclist, opts)
+      }
+    )
 
-local on_attach = function(client, bufnr)
-  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
-  local bufopts = { noremap=true, silent=true, buffer=bufnr }
-  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
-  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
-  vim.keymap.set('n', 'gh', vim.lsp.buf.hover, bufopts)
-  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
-  vim.keymap.set('n', 'gwa', vim.lsp.buf.add_workspace_folder, bufopts)
-  vim.keymap.set('n', 'gwr', vim.lsp.buf.remove_workspace_folder, bufopts)
-  vim.keymap.set('n', 'gwl', function()
-    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
-  end, bufopts)
-  vim.keymap.set("n", "gs", vim.lsp.buf.signature_help, bufopts)
-  vim.keymap.set('n', 'gt', vim.lsp.buf.type_definition, bufopts)
-  vim.keymap.set('n', '<C-t>rn', vim.lsp.buf.rename, bufopts)
-  vim.keymap.set('n', '<C-t>ca', vim.lsp.buf.code_action, bufopts)
-  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
-  vim.keymap.set('n', '<C-t>f', function() vim.lsp.buf.format { async = true } end, bufopts)
-end
+require('mason').setup({
+    ui = {
+        icons = {
+            package_installed = "✓",
+            package_pending = "➜",
+            package_uninstalled = "✗"
+        }
+    }
+})
+
+require('mason-lspconfig').setup {
+    ensure_installed = servers
+}
 
-local metals_config = require("metals").bare_config()
-metals_config.on_attach = function(client, bufnr)
-  vim.keymap.set("n", "gd", vim.lsp.buf.definition)
-  vim.keymap.set("n", "gD", vim.lsp.buf.declaration)
-  vim.keymap.set("n", "gh", vim.lsp.buf.hover)
-  vim.keymap.set("n", "gi", vim.lsp.buf.implementation)
-  vim.keymap.set("n", "gr", vim.lsp.buf.references)
-  vim.keymap.set("n", "gds", vim.lsp.buf.document_symbol)
-  vim.keymap.set("n", "gws", vim.lsp.buf.workspace_symbol)
-  vim.keymap.set("n", "<C-t>cl", vim.lsp.codelens.run)
-  vim.keymap.set("n", "gs", vim.lsp.buf.signature_help)
-  vim.keymap.set("n", "<C-t>rn", vim.lsp.buf.rename)
-  vim.keymap.set("n", "<C-t>f", vim.lsp.buf.format)
-  vim.keymap.set("n", "<C-t>ca", vim.lsp.buf.code_action)
-  vim.keymap.set("n", "gws", function()
-    require("metals").hover_worksheet()
-  end)
+for _, lsp in ipairs(servers) do
+    lspconfig[lsp].setup {
+        capabilities = capabilities,
+        on_attach = on_attach,
+    }
 end
-local nvim_metals_group = vim.api.nvim_create_augroup("nvim-metals", { clear = true })
-vim.api.nvim_create_autocmd("FileType", {
-  pattern = { "scala", "sbt", "java" },
-  callback = function()
-    require("metals").initialize_or_attach(metals_config)
+
+-- %% aerial
+require("aerial").setup({
+  on_attach = function(bufnr)
+    vim.keymap.set("n", "U", "<cmd>AerialPrev<CR>", { buffer = bufnr })
+    vim.keymap.set("n", "D", "<cmd>AerialNext<CR>", { buffer = bufnr })
+    vim.api.nvim_set_hl(0, 'AerialLineClass', { fg = "#ffd700", bold = true })
+    vim.api.nvim_set_hl(0, 'AerialLineFunction', { fg = "#ffd700", bold = true })
+    vim.api.nvim_set_hl(0, 'AerialLineNormal', { fg = "#ffd700", bold = true })
+    vim.api.nvim_set_hl(0, 'AerialLine', { fg = "#ffd700", bold = true })
+    vim.api.nvim_set_hl(0, 'AerialLineNC', { fg = "#222222", bg = "#ffd700", bold = true })
   end,
-  group = nvim_metals_group,
+  highlight_on_hover = true,
+  highlight_on_jump = 300,
+  show_guides = true,
 })
+vim.api.nvim_set_hl(0, 'ArialLine', { fg = "#ffd700", bold = true })
+vim.keymap.set("n", "<leader>a", "<cmd>AerialToggle!<CR>")
+vim.keymap.set("n", "<leader><leader>a", "<cmd>AerialNavToggle<CR>")
+
+-- %% metals lsp
+local function jvmish(on_attach_params)
+  local metals_config = require("metals").bare_config()
+  local nvim_metals_group = vim.api.nvim_create_augroup("nvim-metals", { clear = true })
+  metals_config.on_attach = on_attach_params
+  vim.api.nvim_create_autocmd("FileType", {
+    pattern = { "scala", "sbt", "java" },
+    callback = function()
+      require("metals").initialize_or_attach(metals_config)
+    end,
+    group = nvim_metals_group,
+  })
+end
+
+-- %% archived
 
+-- %% lualine
+-- require('lualine').setup {
+--     options = {
+--         icons_enabled = true,
+--         theme = 'auto',
+--         component_separators = { left = '', right = ''},
+--         --component_separators = { left = '╲', right = '╱' },
+--         section_separators = { left = '', right = ''},
+--         --section_separators = { left = '', right = '' },
+--         disabled_filetypes = { 'NvimTree' },
+--         always_divide_middle = true,
+--         globalstatus = false,
+--     },
+--     sections = {
+--         lualine_a = {'mode'},
+--         lualine_b = {'branch', 'diff', 'diagnostics'},
+--         lualine_c = {'filename'},
+--         lualine_x = {'encoding', 'fileformat'},
+--         lualine_y = {'filetype'},
+--     },
+--     inactive_sections = {
+--         lualine_a = {},
+--         lualine_b = {},
+--         lualine_c = {'filename'},
+--         lualine_x = {'filetype'},
+--         lualine_y = {},
+--         lualine_z = {}
+--     },
+--     tabline = {},
+--     extensions = {}
+-- }
diff --git a/nvim/lua/lspconfig-config.lua b/nvim/lua/lspconfig-config.lua
deleted file mode 100644
index 243d0db..0000000
--- a/nvim/lua/lspconfig-config.lua
+++ /dev/null
@@ -1,47 +0,0 @@
-local navbuddy = require("nvim-navbuddy")
-
--- Mappings.
--- See `:help vim.diagnostic.*` for documentation on any of the below functions
-local opts = { noremap=true, silent=true }
-vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
-vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
-vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
-vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
-
-local on_attach = function(client, bufnr)
-    -- Enable completion triggered by <c-x><c-o>
-    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
-    vim.lsp.inlay_hint.enable(true, { bufnr = bufnr })
-    -- Mappings.
-    -- See `:help vim.lsp.*` for documentation on any of the below functions
-    --
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gh', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gwa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gwr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gwl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gt', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<c-t>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<c-t>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
-    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<c-t>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
-    navbuddy.attach(client, bufnr)
-end
-
--- Update nvim-cmp capabilities and add them to each language server
-local capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
-local lspconfig = require('lspconfig')
-
-function add_capabilities()
-    for _, lsp in ipairs(servers) do
-        lspconfig[lsp].setup {
-            capabilities = capabilities,
-            on_attach = on_attach,
-        }
-    end
-end
-
-add_capabilities()
diff --git a/nvim/lua/lualine-config.lua b/nvim/lua/lualine-config.lua
deleted file mode 100644
index a7bbefa..0000000
--- a/nvim/lua/lualine-config.lua
+++ /dev/null
@@ -1,30 +0,0 @@
-require('lualine').setup {
-    options = {
-        icons_enabled = true,
-        theme = 'auto',
-        component_separators = { left = '', right = ''},
-        --component_separators = { left = '╲', right = '╱' },
-        section_separators = { left = '', right = ''},
-        --section_separators = { left = '', right = '' },
-        disabled_filetypes = { 'NvimTree' },
-        always_divide_middle = true,
-        globalstatus = false,
-    },
-    sections = {
-        lualine_a = {'mode'},
-        lualine_b = {'branch', 'diff', 'diagnostics'},
-        lualine_c = {'filename'},
-        lualine_x = {'encoding', 'fileformat'},
-        lualine_y = {'filetype'},
-    },
-    inactive_sections = {
-        lualine_a = {},
-        lualine_b = {},
-        lualine_c = {'filename'},
-        lualine_x = {'filetype'},
-        lualine_y = {},
-        lualine_z = {}
-    },
-    tabline = {},
-    extensions = {}
-}
diff --git a/nvim/lua/nvim-tree-config.lua b/nvim/lua/nvim-tree-config.lua
deleted file mode 100644
index 87aa129..0000000
--- a/nvim/lua/nvim-tree-config.lua
+++ /dev/null
@@ -1,7 +0,0 @@
-require'nvim-tree'.setup {
-    git = {
-        enable = true,
-        ignore = false,
-        timeout = 400,
-    },
-}
diff --git a/nvim/lua/telescope-config.lua b/nvim/lua/telescope-config.lua
deleted file mode 100644
index fec1fa0..0000000
--- a/nvim/lua/telescope-config.lua
+++ /dev/null
@@ -1 +0,0 @@
-require('telescope')
diff --git a/nvim/lua/treesitter-config.lua b/nvim/lua/treesitter-config.lua
deleted file mode 100644
index 3721774..0000000
--- a/nvim/lua/treesitter-config.lua
+++ /dev/null
@@ -1,24 +0,0 @@
-require('nvim-treesitter.configs').setup {
-    ensure_installed = {
-        'python',
-        'comment',
-        'lua',
-        'rust',
-        'go',
-        'cpp',
-        'lua',
-        'typescript',
-        'javascript',
-        'vim',
-        'vimdoc',
-        'query',
-        'markdown',
-        'markdown_inline',
-    },
-    sync_install = false,
-    auto_install = true,
-    highlight = {
-        enable = true,
-        additional_vim_regex_highlighting = false,
-    },
-}
diff --git a/nvim/lua/zen-config.lua b/nvim/lua/zen-config.lua
index 13e0206..5ae60d4 100644
--- a/nvim/lua/zen-config.lua
+++ b/nvim/lua/zen-config.lua
@@ -9,7 +9,7 @@ local function on()
     vim.cmd [[ LspStop ]]
     vim.api.nvim_command('echo ""')
     vim.opt.guicursor = "v-c-sm:block,n-i-ci-ve:ver25,r-cr-o:hor20"
-    -- vim.diagnostics.hide()
+    vim.diagnostics.hide()
 end
 
 local function off()
@@ -21,10 +21,10 @@ local function off()
     vim.fn['sy#toggle']()
     vim.cmd [[ LspStart ]]
     vim.opt.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20"
-    -- vim.diagnostics.show()
+    vim.diagnostics.show()
 end
 
-vim.keymap.set("n", "<leader><leader>z", function()
+vim.keymap.set("n", "<leader>zz", function()
     require("zen-mode").setup {
         window = {
             width = .8,
@@ -41,7 +41,7 @@ vim.keymap.set("n", "<leader><leader>z", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>x", function()
+vim.keymap.set("n", "<leader>zx", function()
     require("zen-mode").setup {
         window = {
             width = .80,
@@ -58,7 +58,7 @@ vim.keymap.set("n", "<leader><leader>x", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>c", function()
+vim.keymap.set("n", "<leader>zc", function()
     require("zen-mode").setup {
         window = {
             width = .80,
@@ -75,7 +75,7 @@ vim.keymap.set("n", "<leader><leader>c", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>Z", function()
+vim.keymap.set("n", "<leader>ZZ", function()
     require("zen-mode").setup {
         window = {
             width = .95,
@@ -92,7 +92,7 @@ vim.keymap.set("n", "<leader><leader>Z", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>X", function()
+vim.keymap.set("n", "<leader>ZX", function()
     require("zen-mode").setup {
         window = {
             width = .95,
@@ -109,7 +109,7 @@ vim.keymap.set("n", "<leader><leader>X", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>C", function()
+vim.keymap.set("n", "<leader>ZC", function()
     require("zen-mode").setup {
         window = {
             width = .95,
@@ -126,7 +126,7 @@ vim.keymap.set("n", "<leader><leader>C", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>v", function()
+vim.keymap.set("n", "<leader>zv", function()
     require("zen-mode").setup {
         window = {
             width = .80,
@@ -143,7 +143,7 @@ vim.keymap.set("n", "<leader><leader>v", function()
     require("zen-mode").toggle()
 end)
 
-vim.keymap.set("n", "<leader><leader>V", function()
+vim.keymap.set("n", "<leader>ZV", function()
     require("zen-mode").setup {
         window = {
             width = .95,
diff --git a/nvim/theme.vim b/nvim/theme.vim
index 8ac1787..69b4ad8 100644
--- a/nvim/theme.vim
+++ b/nvim/theme.vim
@@ -14,18 +14,6 @@ let s:mid = "#a7a7a7"
 let s:dark = "#767676"
 let s:darkest = "#323232"
 
-let s:high_bg = s:bright_color
-let s:high_fg = s:background_color
-let s:search_fg = "NONE"
-let s:search_bg = s:mid
-let s:search_gui = "underdashed,bold"
-let s:string_type = s:foreground_color
-let s:comments_fg = s:grey
-let s:comments_bg = "NONE"
-let s:val = s:foreground_color
-let s:ops = s:foreground_color
-let s:fn = s:foreground_color
-
 set background=dark
 
 set termguicolors
@@ -48,9 +36,9 @@ call H("CursorLine",  "NONE", s:darkest, "bold")
 " - Number column -
 " -----------------
 call H("CursorColumn", "NONE",  "NONE", "NONE")
-call H("FoldColumn",   s:mid, "NONE", "NONE")
-call H("SignColumn",   s:mid, "NONE", "NONE")
-call H("Folded",       s:mid, "NONE", "NONE")
+call H("FoldColumn",   s:mid,   "NONE", "NONE")
+call H("SignColumn",   s:mid,   "NONE", "NONE")
+call H("Folded",       s:mid,   "NONE", "NONE")
 
 " -------------------------
 " - Window/Tab delimiters -
@@ -66,35 +54,35 @@ call H("Title",       s:primary_color, "NONE",      "NONE")
 " - File Navigation / Searching -
 " -------------------------------
 call H("Directory", s:foreground_color, "NONE", "underline")
-call H("Search",    s:background_color, s:search_bg, s:search_gui)
-call H("IncSearch", s:background_color, s:search_bg, s:search_gui)
-call H("CurSearch", s:background_color, s:search_bg, "underdouble")
-call H("QuickFix",  s:primary_color, "NONE", "underdotted")
+call H("Search",    s:background_color, s:mid, "underdashed,bold")
+call H("IncSearch", s:background_color, s:mid, "underdashed,bold")
+call H("CurSearch", s:background_color, s:mid, "underdouble")
+call H("QuickFix",  s:primary_color,    "NONE", "underdotted")
 
 " -----------------
 " - Prompt/Status -
 " -----------------
-call H("StatusLine",  s:primary_color, s:gray_dark, "bold")
-call H("StatusLineNC",  s:primary_color, s:gray_dark, "bold")
-call H("WildMenu",     s:dark, "NONE", "NONE")
-call H("Question",     s:dark, "NONE", "NONE")
-call H("Title",        s:dark, "NONE", "NONE")
-call H("ModeMsg",      s:dark, "NONE", "NONE")
-call H("MoreMsg",      s:dark, "NONE", "NONE")
+call H("StatusLine",   s:primary_color, s:gray_dark, "bold")
+call H("StatusLineNC", s:primary_color, s:gray_dark, "bold")
+call H("WildMenu",     s:dark,          "NONE",      "NONE")
+call H("Question",     s:dark,          "NONE",      "NONE")
+call H("Title",        s:dark,          "NONE",      "NONE")
+call H("ModeMsg",      s:dark,          "NONE",      "NONE")
+call H("MoreMsg",      s:dark,          "NONE",      "NONE")
 
 " --------------
 " - Visual aid -
 " --------------
 call H("MatchParen",      s:background_color,     s:foreground_color, "bold")
-call H("Visual",          s:foreground_color,     s:bright_color, "bold")
-call H("VisualNOS",       s:foreground_color,     s:bright_color, "bold")
+call H("Visual",          s:foreground_color,     s:bright_color,     "bold")
+call H("VisualNOS",       s:foreground_color,     s:bright_color,     "bold")
 call H("NonText",         s:bright_color,         "NONE")
-call H("Todo",            s:high_bg,              "NONE",    "underline")
-call H("Underlined",      s:high_bg,              "NONE")
-call H("Error",           s:high_bg,              "NONE",    "undercurl")
-call H("ErrorMsg",        s:high_bg,              "NONE",    "undercurl")
-call H("WarningMsg",      s:high_bg,              "NONE",    "undercurl")
-call H("Ignore",          s:high_bg,              "NONE")
+call H("Todo",            s:bright_color,         "NONE",             "underline")
+call H("Underlined",      s:bright_color,         "NONE")
+call H("Error",           s:bright_color,         "NONE",             "undercurl")
+call H("ErrorMsg",        s:bright_color,         "NONE",             "undercurl")
+call H("WarningMsg",      s:bright_color,         "NONE",             "undercurl")
+call H("Ignore",          s:bright_color,         "NONE")
 call H("SpecialKey",      s:primary_color,        "NONE")
 call H("WhiteSpaceChar",  s:primary_color,        "NONE")
 call H("WhiteSpace",      s:primary_color,        "NONE")
@@ -102,47 +90,47 @@ call H("WhiteSpace",      s:primary_color,        "NONE")
 " --------------------------------
 " Variable types
 " --------------------------------
-call H("Constant",       s:string_type,       "NONE", "NONE")
-call H("String",         s:string_type,       s:comments_bg, "NONE")
-call H("StringDelimiter",s:val,               s:comments_bg, "NONE")
-call H("Character",      s:string_type,       "NONE", "NONE")
-call H("Number",         s:string_type,       "NONE", "NONE")
-call H("Boolean",        s:string_type,       "NONE", "NONE")
-call H("Float",          s:string_type,       "NONE", "NONE")
-call H("Identifier",     s:fn,                "NONE", "NONE")
-call H("Function",       s:fn,                "NONE", "NONE")
+call H("Constant",       s:foreground_color,       "NONE", "NONE")
+call H("String",         s:foreground_color,       "NONE", "NONE")
+call H("StringDelimiter",s:foreground_color,       "NONE", "NONE")
+call H("Character",      s:foreground_color,       "NONE", "NONE")
+call H("Number",         s:foreground_color,       "NONE", "NONE")
+call H("Boolean",        s:foreground_color,       "NONE", "NONE")
+call H("Float",          s:foreground_color,       "NONE", "NONE")
+call H("Identifier",     s:foreground_color,       "NONE", "NONE")
+call H("Function",       s:foreground_color,       "NONE", "NONE")
 
 " --------------------------------
 " Language constructs
 " --------------------------------
-call H("Keyword",        s:fn, "NONE", "bold")
-call H("Statement",      s:fn, "NONE", "bold")
-call H("Repeat",         s:fn, "NONE", "NONE")
-call H("Comment",        s:comments_fg,   s:comments_bg, "italic")
-call H("SpecialComment", s:comments_fg,   s:comments_bg, "italic")
-call H("Conditional",    s:foreground_color)
-call H("Special",        s:foreground_color)
-call H("SpecialChar",    s:foreground_color)
-call H("Tag",            s:foreground_color)
-call H("Delimiter",      s:val)
+call H("Keyword",        s:foreground_color, "NONE", "bold")
+call H("Statement",      s:foreground_color, "NONE", "bold")
+call H("Repeat",         s:foreground_color, "NONE", "NONE")
+call H("Comment",        s:grey,             "NONE", "italic")
+call H("SpecialComment", s:grey,             "NONE", "italic")
+call H("Conditional",    s:foreground_color, "NONE", "bold")
+call H("Special",        s:foreground_color, "NONE", "bold")
+call H("SpecialChar",    s:foreground_color, "NONE", "bold")
+call H("Tag",            s:foreground_color, "NONE", "bold")
+call H("Delimiter",      s:foreground_color)
 call H("Debug",          s:foreground_color)
 call H("Repeat",         s:foreground_color)
-call H("Label",          s:val)
-call H("Operator",       s:val, "NONE", "bold")
-call H("Exception",      s:val)
+call H("Label",          s:foreground_color)
+call H("Operator",       s:foreground_color, "NONE", "bold")
+call H("Exception",      s:foreground_color, "NONE", "bold")
 
 " ----------
 " - C like -
 " ----------
-call H("PreProc", s:fn)
-call H("Include", s:fn)
-call H("Define", s:fn)
-call H("Macro", s:fn)
-call H("PreCondit", s:fn)
-call H("Type", s:fn)
-call H("StorageClass", s:fn)
-call H("Structure", s:fn)
-call H("TypeDef", s:fn)
+call H("PreProc",      s:foreground_color, "NONE", "bold")
+call H("Include",      s:foreground_color, "NONE", "bold")
+call H("Define",       s:foreground_color, "NONE", "bold")
+call H("Macro",        s:foreground_color, "NONE", "bold")
+call H("PreCondit",    s:foreground_color, "NONE", "bold")
+call H("Type",         s:foreground_color, "NONE", "bold")
+call H("StorageClass", s:foreground_color, "NONE", "bold")
+call H("Structure",    s:foreground_color, "NONE", "bold")
+call H("TypeDef",      s:foreground_color, "NONE", "bold")
 
 " --------------------------------
 " Diff
diff --git a/scripts/gurl b/scripts/gurl
new file mode 100755
index 0000000..afdd9c9
--- /dev/null
+++ b/scripts/gurl
@@ -0,0 +1,89 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+from subprocess import check_output
+from pathlib import Path
+from argparse import ArgumentParser, Namespace
+
+
+def relative_parent_path(p1: str | Path, p2: str | Path) -> str:
+    p1, p2 = str(p1), str(p2)
+    if p1 in p2:
+        return p2.replace(p1, "")
+    elif p2 in p1:
+        return p1.replace(p2, "")
+    return ""
+
+
+class GitException(Exception):
+    pass
+
+
+def qsh(cmd: str, exception: Exception | None = None) -> str:
+    try:
+        return check_output(cmd, shell=True, universal_newlines=True).strip()
+    except Exception as e:
+        raise (exception or e)
+
+
+def get_args() -> Namespace:
+    parser = ArgumentParser()
+    parser.add_argument(
+        "filepath",
+        type=str,
+        help="Path to file to create GitHub link to"
+    )
+    parser.add_argument(
+        "-l",
+        "--lines",
+        type=str,
+        default=None,
+        help="Lines to generate permalink to in format `-l 125` for a single line or `-l 125:145` for a range"
+    )
+    return parser.parse_args()
+
+
+def main(f: str | None = None, lower_line: int | None = None, upper_line: int | None = None) -> str:
+    args = get_args()
+    f = f or args.filepath
+    if not f:
+        raise FileNotFoundError(2, "No file path specified.")
+    lower_line = lower_line or args.lines.split(":")[0] if args.lines else None
+    upper_line = upper_line or args.lines.split(":")[-1] if (args.lines and len(args.lines.split(":")) > 1) else None
+    f_path = Path(f).absolute()
+    if not f_path.exists():
+        raise FileNotFoundError(2, f"File {f} does not exist.")
+    try:
+        os.chdir(f_path.parent)
+    except Exception as _:
+        raise FileNotFoundError(2, f"Parent directory {str(f_path.parent)} does not exist.")
+    git_dir = Path(qsh("git rev-parse --show-toplevel", GitException(1, f"Cannot find git repo from {os.getcwd()}")))
+    if (git_dir / ".git").is_file():
+        git_dir_worktree = Path(qsh(f"cat {str(git_dir / '.git')}").lstrip("gitdir: "))
+        if git_dir_worktree.is_dir():
+            for prnt in git_dir.parents:
+                if prnt.name == ".git":
+                    git_dir_worktree = prnt.parent
+                    break
+    rpath = relative_parent_path(f_path, git_dir)
+    remote_url = qsh("git config --get remote.origin.url", GitException(1, f"Cannot find remote origin URL for file {f}"))
+    if remote_url.startswith("git@"):
+        remote_url = remote_url.replace(":", "/").replace("git@", "")
+    remote_url = remote_url.removesuffix(".git").removeprefix("https://").removeprefix("http://")
+    git_branch = qsh("git branch --show-current", GitException(1, "Unable to determine current git branch"))
+    blob_base = Path(remote_url) / "blob" / git_branch / rpath.strip("/")
+    range = None
+    if lower_line:
+        range = f"#L{lower_line}"
+    if (upper_line) and (upper_line != lower_line):
+        range = f"{range}-{upper_line}"
+    if range:
+        blob_base = str(blob_base) + range
+    url = "https://" + str(blob_base)
+    print(url)
+    return url
+
+
+if __name__ == "__main__":
+    main()
diff --git a/wezterm/wezterm.lua b/wezterm/wezterm.lua
index 430232c..98e6323 100755
--- a/wezterm/wezterm.lua
+++ b/wezterm/wezterm.lua
@@ -454,8 +454,8 @@ config.keys = {
   { key = 'D', mods = 'CTRL|SHIFT', action = wezterm.action.ScrollByPage(0.5) },
   { key = ')', mods = 'CTRL|SHIFT', action = wezterm.action.ScrollByLine(-1) },
   { key = '(', mods = 'CTRL|SHIFT', action = wezterm.action.ScrollByLine(1) },
-  -- { key = 'k', mods = 'LEADER', action = wezterm.action.ScrollToPrompt(-1) },
-  -- { key = 'j', mods = 'LEADER', action = wezterm.action.ScrollToPrompt(1) },
+  { key = 'k', mods = 'LEADER', action = wezterm.action.ScrollToPrompt(-1) },
+  { key = 'j', mods = 'LEADER', action = wezterm.action.ScrollToPrompt(1) },
   { key = 't', mods = 'LEADER', action = wezterm.action.ShowTabNavigator },
   { key = 'C', mods = 'CTRL|SHIFT', action = wezterm.action { EmitEvent = "select-and-paste" } },
   { key = 'm', mods = 'CTRL|SHIFT', action = wezterm.action.AdjustPaneSize { 'Left', 5 } },
@@ -521,6 +521,15 @@ config.keys = {
       },
     },
   },
+  {
+    key = 'g',
+    mods = 'LEADER',
+    action = wezterm.action.QuickSelectArgs {
+      patterns = {
+        '[\\w\\-\\.]+',
+      },
+    },
+  },
 
   {
     key = 'R',
@@ -584,7 +593,7 @@ config.keys = {
     },
   },
   {
-    key = 'g',
+    key = '/',
     mods = "LEADER",
     action = wezterm.action.Multiple({
       wezterm.action.CopyMode("ClearPattern"),
